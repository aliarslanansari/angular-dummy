{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/angular-material.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth-interceptor.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/error-interceptor.ts","webpack:///src/app/error/error.component.ts","webpack:///src/app/error/error.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/posts/post-create/mime-type.validator.ts","webpack:///src/app/posts/post-create/post-create.component.ts","webpack:///src/app/posts/post-create/post-create.component.html","webpack:///src/app/posts/post-list/post-list.component.ts","webpack:///src/app/posts/post-list/post-list.component.html","webpack:///src/app/posts/posts.module.ts","webpack:///src/app/posts/posts.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AngularMaterialModule","routes","path","component","canActivate","loadChildren","m","AuthModule","AppRoutingModule","forRoot","imports","providers","AppComponent","authService","autoAuthData","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","bootstrap","entryComponents","AuthInterceptor","next","authToken","getToken","authRequest","clone","headers","set","handle","AuthGuard","router","route","state","isAuth","getIsAuth","navigate","BACKEND_URL","apiUrl","AuthService","http","isAuthenticated","authStatusListener","email","password","authData","post","subscribe","response","console","log","error","userId","token","expiresInDuration","expiresIn","setAuthTimer","now","Date","expirationDate","getTime","saveAuthData","authInformation","getAuthData","duration","tokenTimer","setTimeout","logout","clearAuthData","clearTimeout","asObservable","localStorage","setItem","toISOString","removeItem","getItem","providedIn","ErrorInterceptor","dialog","pipe","errorMessage","message","open","data","ErrorComponent","HeaderComponent","userIsAuthenticated","authListenerSubs","getAuthStatusListener","unsubscribe","mimeType","control","value","file","fileReader","FileReader","frObs","create","observer","addEventListener","arr","Uint8Array","result","subarray","header","isValid","i","length","toString","invalidMimeType","complete","readAsArrayBuffer","PostCreateComponent","PostsService","mode","isLoading","form","validators","required","minLength","asyncValidators","paramMap","has","postId","get","getOnePost","postData","_id","title","content","imagePath","creator","setValue","image","authStatusSub","authStatus","invalid","addPost","updatePost","reset","event","target","files","patchValue","updateValueAndValidity","reader","onload","imagePreview","readAsDataURL","PostListComponent","totalPosts","postPerPage","currentPage","pageSizeOptions","posts","getPosts","getUserId","postsSub","getPostUpdateListener","postCount","deletePost","pageData","pageIndex","pageSize","PostsModule","postsUpdated","postsPerPage","queryParams","map","fetchedpost","maxPosts","transformedPostsData","FormData","append","resData","put","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatToolbarModule } from '@angular/material/toolbar'\r\nimport { MatExpansionModule } from '@angular/material/expansion'\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner'\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatDialogModule } from '@angular/material/dialog'\r\n\r\n@NgModule({\r\n    exports:[\r\n        MatInputModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatToolbarModule,\r\n        MatExpansionModule,\r\n        MatPaginatorModule,\r\n        MatDialogModule,\r\n        MatProgressSpinnerModule \r\n    ]   \r\n})\r\nexport class AngularMaterialModule{\r\n\r\n}","import { PostListComponent } from './posts/post-list/post-list.component';\r\nimport { PostCreateComponent } from './posts/post-create/post-create.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from './auth/auth.guard';\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: PostListComponent },\r\n    { path: 'create', component: PostCreateComponent, canActivate:[AuthGuard] },\r\n    { path: 'edit/:postId', component: PostCreateComponent, canActivate:[AuthGuard] },\r\n    /*\r\n    For Angular 8 and 9, the lazy load declaration changed. Since Angular 8 introduced the new recommended module \r\n    loading method, previously the default method of lazy loading modules was to specify a string path to a module:\r\n        { path:\"auth\", loadChildren:'./auth/auth.module#AuthModule'}, \r\n    The method of importing modules has changed to dynamic import. The dynamic import is promise-based and gives you access to the\r\n    module, where the module’s class can be called. Thus your import should now be changed to:\r\n        { path: 'auth', loadChildren: () => import('src/app/auth/auth.module').then(m => m.AuthModule) }\r\n     */\r\n    { path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule],\r\n    providers:[AuthGuard]\r\n})\r\nexport class AppRoutingModule {}","import { AuthService } from './auth/auth.service';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { Post } from \"./posts/post.model\";\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n\n    constructor(private authService:AuthService){}\n    ngOnInit(){\n      this.authService.autoAuthData();\n    }\n}\n","<app-header></app-header>\r\n<main>\r\n    <router-outlet></router-outlet>\r\n        <!-- <app-post-create></app-post-create>\r\n        <app-post-list></app-post-list> -->\r\n</main>\r\n","import { PostsModule } from './posts/posts.module';\nimport { AngularMaterialModule } from './angular-material.module';\nimport { ErrorComponent } from './error/error.component';\nimport { ErrorInterceptor } from './error-interceptor';\nimport { AuthInterceptor } from './auth/auth-interceptor';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { NgModule } from '@angular/core';\n \nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n  \n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    ErrorComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    AngularMaterialModule,\n    PostsModule,\n  ],\n  providers: [\n    {provide:HTTP_INTERCEPTORS,useClass:AuthInterceptor,multi:true},\n    {provide:HTTP_INTERCEPTORS,useClass:ErrorInterceptor,multi:true},\n  ],\n  bootstrap: [AppComponent],\n  entryComponents:[ErrorComponent]\n})\nexport class AppModule { } ","import { AuthService } from './auth.service';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor{\r\n    constructor(private authService:AuthService){}\r\n    intercept(req:HttpRequest<any>,next:HttpHandler){\r\n        const authToken = this.authService.getToken();\r\n        const authRequest = req.clone({\r\n            headers:req.headers.set('Authorization',\"Bearer \"+authToken)\r\n        })\r\n        return next.handle(authRequest)\r\n    }\r\n}\r\n","import { AuthService } from './auth.service';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate{\r\n\r\n    constructor(private authService:AuthService, private router:Router){}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, \r\n        state: RouterStateSnapshot): boolean | import(\"@angular/router\").UrlTree | import(\"rxjs\").Observable<boolean | import(\"@angular/router\").UrlTree> | Promise<boolean | import(\"@angular/router\").UrlTree> \r\n    {\r\n        const isAuth = this.authService.getIsAuth();\r\n        if(!isAuth){\r\n            this.router.navigate(['/login']);\r\n        }\r\n        return isAuth;\r\n    }\r\n\r\n}","import { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthData } from './auth-data.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { environment } from './../../environments/environment';\r\nconst BACKEND_URL = environment.apiUrl + \"/user\";\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class AuthService {\r\n    private token: string;\r\n    isAuthenticated = false;\r\n    private tokenTimer: any;\r\n    private userId:string;\r\n    private authStatusListener = new Subject<boolean>();\r\n    constructor(private http:HttpClient, private router:Router){}\r\n    createUser(email:string, password:string){\r\n        const authData :AuthData = { email:email, password:password};\r\n        this.http.post(BACKEND_URL+'/signup',authData)\r\n        .subscribe(response=>{\r\n            console.log(response);\r\n            this.router.navigate(['/']);\r\n        },error=>{\r\n            this.authStatusListener.next(false);\r\n        }\r\n        )\r\n    }\r\n\r\n    getUserId(){\r\n        return this.userId;\r\n    }\r\n\r\n    login(email:string, password:string){\r\n        const authData :AuthData = { email:email, password:password};\r\n        this.http.post<{token:string,expiresIn:number, userId:string}>(BACKEND_URL+'/login',authData)\r\n        .subscribe(response=>{\r\n            const token = response.token;\r\n            this.token = token;\r\n            if(token){\r\n                const expiresInDuration = response.expiresIn;\r\n                this.userId = response.userId;\r\n                this.setAuthTimer(expiresInDuration);\r\n                this.authStatusListener.next(true);\r\n                this.isAuthenticated = true;\r\n                const now = new Date();\r\n                const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\r\n                console.log(expirationDate);\r\n                this.saveAuthData(token, expirationDate,this.userId);\r\n                this.router.navigate(['/']);\r\n            }\r\n            \r\n        }, error=>{\r\n            this.authStatusListener.next(false); \r\n        });\r\n\r\n    }\r\n    autoAuthData(){\r\n        const authInformation = this.getAuthData();\r\n        if(!authInformation){\r\n            return\r\n        }\r\n        const now = new Date();\r\n        const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\r\n        if(expiresIn > 0){\r\n            this.token = authInformation.token;\r\n            this.isAuthenticated = true;\r\n            this.userId = authInformation.userId;\r\n            this.authStatusListener.next(true);\r\n            this.setAuthTimer(expiresIn/1000);\r\n        }\r\n    }\r\n    private setAuthTimer(duration: number){\r\n        this.tokenTimer = setTimeout(()=>{\r\n            this.logout();\r\n        },duration * 1000)\r\n    }\r\n\r\n    logout(){\r\n        this.token = null;\r\n        this.userId = null;\r\n        this.isAuthenticated = false;\r\n        this.authStatusListener.next(false);\r\n        this.router.navigate(['/']);\r\n        this.clearAuthData();\r\n        clearTimeout(this.tokenTimer);\r\n    }\r\n    getToken(){\r\n        return this.token;\r\n    }\r\n    getAuthStatusListener(){\r\n        return this.authStatusListener.asObservable();\r\n    }\r\n    getIsAuth(){\r\n        return this.isAuthenticated;\r\n    }\r\n    private saveAuthData(token:string, expirationDate:Date, userId:string){\r\n        localStorage.setItem('token',token);\r\n        localStorage.setItem('expiration',expirationDate.toISOString());\r\n        localStorage.setItem('userId',userId);\r\n    }\r\n    private clearAuthData(){\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('expiration');\r\n        localStorage.removeItem('userId');\r\n    }\r\n    private getAuthData(){\r\n        const token = localStorage.getItem('token');\r\n        const expirationDate = localStorage.getItem('expiration');\r\n        const userId = localStorage.getItem('userId');\r\n\r\n        if(!token || !expirationDate){\r\n            return\r\n        }\r\n        return{\r\n            token:token,\r\n            expirationDate: new Date(expirationDate),\r\n            userId:userId\r\n        };\r\n    }\r\n}","import { ErrorComponent } from './error/error.component';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Injectable } from '@angular/core';\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor{\r\n    constructor(private dialog:MatDialog){}\r\n    intercept(req:HttpRequest<any>,next:HttpHandler){\r\n        return next.handle(req).pipe(\r\n            catchError((error:HttpErrorResponse)=>{\r\n                let errorMessage = \"An unknown error occurred!\"\r\n                if(error.error.message){\r\n                    errorMessage = error.error.message;\r\n                }\r\n                console.log(console.error); \r\n                this.dialog.open(ErrorComponent,{data:{message:errorMessage}});\r\n                return throwError(error);\r\n            })\r\n        );\r\n    } \r\n}","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n    templateUrl:'./error.component.html'\r\n})\r\nexport class ErrorComponent{\r\n    constructor(@Inject(MAT_DIALOG_DATA) public data:{message:string}){}\r\n}","    <h1 mat-dialog-title>An Error Occured!</h1>\r\n    <div class=\"mat-dialog-content\">\r\n        <p class='mat-body-1'>{{data.message}}</p>\r\n    </div>\r\n    <div class=\"mat-mat-dialog-actions\">\r\n        <button mat-button mat-dialog-close >Ok</button>\r\n    </div>\r\n    \r\n    ","import { Subscription } from 'rxjs';\nimport { AuthService } from './../auth/auth.service';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit,OnDestroy {\n  userIsAuthenticated = false;\n  private authListenerSubs:Subscription;\n  constructor( private authService:AuthService) {}\n\n  ngOnInit(): void {\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.authListenerSubs = this.authService.getAuthStatusListener().subscribe((isAuthenticated)=>{\n      this.userIsAuthenticated = isAuthenticated;\n    });\n  }\n  ngOnDestroy(){\n    this.authListenerSubs.unsubscribe();\n  }\n  onLogout(){\n    this.authService.logout();\n  }\n}","\n<mat-toolbar color='primary'>\n  <a routerLink=\"/\"><span>MyMessages</span></a>\n  <span class=\"spacer\"></span>\n  <ul>\n    <li *ngIf=\"userIsAuthenticated\">\n      <a mat-button routerLink='create' routerLinkActive='mat-accent'>New Post</a>\n    </li>\n    <li *ngIf=\"!userIsAuthenticated\">\n      <a mat-button routerLink='auth/login' routerLinkActive='mat-accent'>Login</a>\n    </li>\n    <li *ngIf=\"!userIsAuthenticated\">\n      <a mat-button routerLink='auth/signup' routerLinkActive='mat-accent'>Signup</a>\n    </li>\n    <li *ngIf=\"userIsAuthenticated\">\n      <button mat-button (click)=\"onLogout()\">Logout</button>\n    </li>\n\n  </ul>\n  <span></span>\n</mat-toolbar>","import { AbstractControl } from \"@angular/forms\";\r\nimport { Observable, Observer, of } from \"rxjs\";\r\n\r\nexport const mimeType = (\r\n  control: AbstractControl\r\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\r\n  if (typeof(control.value) === 'string') {\r\n    return of(null);\r\n  }\r\n  const file = control.value as File;\r\n  const fileReader = new FileReader();\r\n  const frObs = Observable.create(\r\n    (observer: Observer<{ [key: string]: any }>) => {\r\n      fileReader.addEventListener(\"loadend\", () => {\r\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\r\n        let header = \"\";\r\n        let isValid = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n          header += arr[i].toString(16);\r\n        }\r\n        switch (header) {\r\n          case \"89504e47\":\r\n            isValid = true;\r\n            break;\r\n          case \"ffd8ffe0\":\r\n          case \"ffd8ffe1\":\r\n          case \"ffd8ffe2\":\r\n          case \"ffd8ffe3\":\r\n          case \"ffd8ffe8\":\r\n            isValid = true;\r\n            break;\r\n          default:\r\n            isValid = false; // Or you can use the blob.type as fallback\r\n            break;\r\n        }\r\n        if (isValid) {\r\n          observer.next(null);\r\n        } else {\r\n          observer.next({ invalidMimeType: true });\r\n        }\r\n        observer.complete();\r\n      });\r\n      fileReader.readAsArrayBuffer(file);\r\n    }\r\n  );\r\n  return frObs;\r\n};\r\n","import { AuthService } from './../../auth/auth.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { PostsService } from './../posts.service';\r\nimport { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { Post } from './../post.model';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { mimeType } from './mime-type.validator';\r\n@Component({\r\n  selector:'app-post-create',\r\n  templateUrl:'./post-create.component.html',\r\n  styleUrls:['./post-create.component.css']\r\n})\r\n\r\nexport class PostCreateComponent implements OnInit, OnDestroy{\r\n  private mode = 'create';\r\n  private postId: string;\r\n  form:FormGroup;\r\n  post: Post;\r\n  imagePreview: string;\r\n  \r\n  isLoading: boolean  = false;\r\n  private authStatusSub:Subscription;\r\n  constructor(public PostsService: PostsService, public route:ActivatedRoute,private authService:AuthService){}\r\n  \r\n  ngOnInit(){\r\n    \r\n    this.form = new FormGroup({\r\n      'title':new FormControl(null,{validators:[Validators.required,Validators.minLength(3)]}),\r\n      'content':new FormControl(null, {validators:[Validators.required]}),\r\n      'image': new FormControl(null, {validators:[Validators.required],asyncValidators:[mimeType]})\r\n    });\r\n    this.route.paramMap.subscribe((paramMap:ParamMap)=>{\r\n      if(paramMap.has('postId')){\r\n        this.mode = 'edit'\r\n        this.postId = paramMap.get('postId');\r\n                this.isLoading = true;\r\n                this.PostsService.getOnePost(this.postId)\r\n                .subscribe((postData)=>{\r\n                  this.isLoading= false;\r\n                  this.post = {id:postData._id, title:postData.title, content:postData.content,imagePath:postData.imagePath, creator:postData.creator};\r\n                  this.form.setValue({\r\n                    title:this.post.title,\r\n                        content:this.post.content,\r\n                        image:this.post.imagePath\r\n                      });\r\n                    });\r\n                  }else{\r\n                    this.mode = 'create';\r\n                    this.postId = null;\r\n                  }\r\n                });\r\n                this.authStatusSub = this.authService.getAuthStatusListener().subscribe((authStatus)=>{\r\n                  this.isLoading = false;\r\n                });\r\n          }\r\n              \r\n              onAddPost(){\r\n                if (this.form.invalid) {\r\n                  return;\r\n          }\r\n          this.isLoading = true;\r\n          if (this.mode === \"create\") {\r\n            this.PostsService.addPost(\r\n              this.form.value.title,\r\n              this.form.value.content,\r\n              this.form.value.image\r\n              );\r\n          } else {\r\n            this.PostsService.updatePost(\r\n              this.postId,\r\n              this.form.value.title,\r\n              this.form.value.content,\r\n              this.form.value.image\r\n              );\r\n          }\r\n          this.form.reset();\r\n    }\r\n    onImagePicked(event: Event) {\r\n      const file = (event.target as HTMLInputElement).files[0];\r\n      console.log('sssssss',file);\r\n                this.form.patchValue({ image: file });\r\n                this.form.get(\"image\").updateValueAndValidity();\r\n        console.log('qqqqqqqqqqqqq',this.form.value.image)\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n          this.imagePreview = reader.result as string;\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n      ngOnDestroy(): void {\r\n        this.authStatusSub.unsubscribe()\r\n      }\r\n    }","<mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n<form [formGroup]=\"form\" (submit)=\"onAddPost()\" *ngIf= \"!isLoading\">\r\n    <mat-form-field>\r\n        <input \r\n            type=\"text\" \r\n            matInput\r\n            name='title'\r\n            formControlName='title'\r\n            placeholder=\"Post Title\"\r\n            >\r\n            <mat-error *ngIf=\"form.get('title').invalid\">Please Enter Title with atleast 3 character long!</mat-error>\r\n    </mat-form-field>\r\n    <div>\r\n        <button mat-stroked-button color='primary' type=\"button\" (click)=\"filepicker.click()\">Pick Image</button>\r\n        <input type=\"file\" #filepicker (change)=\"onImagePicked($event)\">\r\n    </div>\r\n    <div class=\"image-preview\" *ngIf=\"imagePreview!=='' && imagePreview && form.get('image').valid\">\r\n        <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\r\n    </div>\r\n        <mat-form-field>\r\n            <textarea \r\n                matInput \r\n                rows=\"3\"\r\n                name='content' \r\n                formControlName='content'\r\n                color='primary'   \r\n                placeholder=\"Post Content\"\r\n                >\r\n            </textarea>\r\n            <mat-error *ngIf=\"form.get('content').invalid\">Please Enter Content!</mat-error>\r\n        </mat-form-field>\r\n        <button \r\n            mat-raised-button\r\n            color='primary'\r\n            type=\"submit\">Save Post</button>\r\n</form>\r\n</mat-card>","import { AuthService } from './../../auth/auth.service';\nimport { PostsService } from './../posts.service';\nimport { Component, OnInit, OnDestroy} from '@angular/core';\nimport { Post } from './../post.model';\nimport { Subscription } from 'rxjs';\nimport { PageEvent } from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.css']\n})\nexport class PostListComponent implements OnInit, OnDestroy {\n  // posts = [\n  //   {title:'First Post', content:'This is the first post\\' Content'},\n  //   {title:'Second Post', content:'This is the second post\\' Content'},\n  //   {title:'Third Post', content:'This is the third post\\' Content'},\n  // ]\n  totalPosts = 0;\n  postPerPage =2;\n  currentPage = 1;\n  userIsAuthenticated = false;\n  userId:string;\n  pageSizeOptions = [1,2,5,10];\n  posts:Post[] = [];\n  private postsSub: Subscription;\n  isLoading = false;\n  private authStatusSub:Subscription;\n\n  constructor(public PostsService:PostsService, private authService:AuthService) { }\n\n  ngOnInit(): void {\n    this.PostsService.getPosts(this.postPerPage,this.currentPage);\n    this.isLoading = true;\n    this.userId = this.authService.getUserId();\n    this.postsSub = this.PostsService.getPostUpdateListener()\n    .subscribe((postData: {posts:Post[], postCount:number})=>{\n      this.posts = postData.posts;\n      this.totalPosts = postData.postCount;\n      this.isLoading = false;\n    });\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.authStatusSub =  this.authService.getAuthStatusListener().subscribe(isAuthenticated=>{\n      this.userIsAuthenticated= isAuthenticated;\n      this.userId = this.authService.getUserId();\n    });\n  }\n  ngOnDestroy():void{\n    this.postsSub.unsubscribe();\n  }\n  onDelete(postId:string){\n    this.PostsService.deletePost(postId).subscribe(()=>{\n      this.PostsService.getPosts(this.postPerPage,this.currentPage);\n    },()=>{\n      this.isLoading = false;\n    });\n  }\n  onChangedPage(pageData : PageEvent){\n    this.currentPage = pageData.pageIndex+1;\n    this.postPerPage = pageData.pageSize;\n    this.PostsService.getPosts(this.postPerPage,this.currentPage);\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi='true' *ngIf=\"posts.length>0 && !isLoading\">\n    <mat-expansion-panel *ngFor=\"let post of posts\">\n        <mat-expansion-panel-header>\n            {{post.title}}\n        </mat-expansion-panel-header>\n        <div class=\"post-images\">\n            <img [src]=\"post.imagePath\" [alt]=\"post.title\">\n        </div>\n        <p>{{post.content}}</p>\n        {{userIsAuthenticated}} - {{userId}} - {{post.creator}}\n        <mat-action-row *ngIf=\"userIsAuthenticated && userId == post.creator\">\n            <button mat-button color=\"primary\" [routerLink]=\"['/edit',post.id]\">EDIT</button>\n            <button mat-button color='warn' (click)=\"onDelete(post.id)\">DELETE</button>\n        </mat-action-row>\n    </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator \n    *ngIf=\"posts.length>0\"\n    [length]='totalPosts' \n    [pageSize]='postPerPage' \n    [pageSizeOptions]=\"pageSizeOptions\"\n    (page)=\"onChangedPage($event)\" >\n</mat-paginator>\n<p *ngIf=\"posts.length===0 && !isLoading\" class='info-text mat-body-1'>No Posts Added Yet</p>\n","import { RouterModule } from '@angular/router';\r\nimport { AngularMaterialModule } from './../angular-material.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { PostListComponent } from './post-list/post-list.component';\r\nimport { PostCreateComponent } from './post-create/post-create.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n    declarations:[\r\n        PostCreateComponent,\r\n        PostListComponent,    \r\n    ],\r\n    imports:[\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        AngularMaterialModule,\r\n        RouterModule\r\n    ]\r\n})\r\nexport class PostsModule{}","import { Post } from './post.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { environment } from './../../environments/environment';\r\nconst BACKEND_URL = environment.apiUrl + \"/posts/\";\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class PostsService {\r\n    constructor(private http:HttpClient, private router:Router){}\r\n    private postsUpdated = new Subject<{posts:Post[],postCount:number}>();\r\n    private posts: Post[] = [];\r\n    \r\n    getPosts(postsPerPage:number, currentPage:number){\r\n        const queryParams = `?page=${currentPage}&pagesize=${postsPerPage}`;\r\n        this.http.get<{message:string, posts:any,maxPosts:number}>(BACKEND_URL+queryParams)\r\n        .pipe(map((postData)=>{\r\n            return { post: postData.posts.map(fetchedpost=>{\r\n                return{\r\n                    title : fetchedpost.title,\r\n                    content:fetchedpost.content,\r\n                    id: fetchedpost._id,\r\n                    imagePath: fetchedpost.imagePath,\r\n                    creator: fetchedpost.creator,\r\n                }\r\n            }),\r\n            maxPosts: postData.maxPosts\r\n        };\r\n        }))\r\n        .subscribe((transformedPostsData)=>{\r\n            console.log(transformedPostsData)\r\n            this.posts = transformedPostsData.post;\r\n            this.postsUpdated.next({posts:[...this.posts],postCount:transformedPostsData.maxPosts});\r\n        });\r\n    }\r\n    getPostUpdateListener(){\r\n        return this.postsUpdated.asObservable();\r\n    }\r\n    addPost(title:string, content:string, image:File){\r\n        const postData = new FormData();\r\n        postData.append('title',title);\r\n        postData.append('content',content);\r\n        postData.append('image',image, title);\r\n        this.http.post<{message:string, post:Post}>(BACKEND_URL, postData)\r\n        .subscribe((resData)=>{ \r\n            this.router.navigate(['/',])\r\n        });\r\n    }\r\n    getOnePost(id:string){\r\n        return this.http.get<{_id:string, title:string, content:string, imagePath:string, creator:string}>('http://localhost:3000/api/posts/'+id);\r\n    }\r\n\r\n    deletePost(postId:string){\r\n       return this.http.delete(BACKEND_URL+postId);\r\n    }\r\n    \r\n    updatePost(id:string, title:string, content:string, image:File|string){\r\n        let postData: Post | FormData;\r\n    if (typeof image === \"object\") {\r\n      postData = new FormData();\r\n      postData.append(\"id\", id);\r\n      postData.append(\"title\", title);\r\n      postData.append(\"content\", content);\r\n      postData.append(\"image\", image, title);\r\n    } else {\r\n      postData = {\r\n        id: id,\r\n        title: title,\r\n        content: content,\r\n        imagePath: image,\r\n        creator: null\r\n      };\r\n    }\r\n    this.http\r\n      .put(BACKEND_URL + id, postData)\r\n      .subscribe(response => {\r\n        this.router.navigate([\"/\"]);\r\n      });\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl : \"http://localhost:3000/api\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}